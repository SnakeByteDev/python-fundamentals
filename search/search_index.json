{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Fundamentals","text":""},{"location":"conditional_statements/","title":"Python Conditional Statements","text":"<p>Note: Indentation is very important in Python. It is used to define a block of code. All statements within the same block must have the same indentation. The standard indentation is 4 spaces. Indentation is used to define the body of the conditional statements or loops in Python.</p> In\u00a0[1]: Copied! <pre>x = 10\n\nif x &gt; 5: # condition is True\n    print(\"x is greater than 5\")\n\nif x &lt; 5: # condition is False\n    print(\"x is less than 5\")\n</pre> x = 10  if x &gt; 5: # condition is True     print(\"x is greater than 5\")  if x &lt; 5: # condition is False     print(\"x is less than 5\") <pre>x is greater than 5\n</pre> In\u00a0[2]: Copied! <pre>x = 99\n\nif x % 2 == 0: # condition is True\n    print(\"x is even\")\nelse: # condition is False\n    print(\"x is odd\")\n</pre> x = 99  if x % 2 == 0: # condition is True     print(\"x is even\") else: # condition is False     print(\"x is odd\") <pre>x is odd\n</pre> In\u00a0[3]: Copied! <pre>x = 0\n\nif x &gt; 0: # condition is False\n    print(\"x is positive\")\nelif x &lt; 0: # condition is False\n    print(\"x is negative\")\nelse: # condition is True\n    print(\"x is zero\")\n</pre> x = 0  if x &gt; 0: # condition is False     print(\"x is positive\") elif x &lt; 0: # condition is False     print(\"x is negative\") else: # condition is True     print(\"x is zero\") <pre>x is zero\n</pre> In\u00a0[4]: Copied! <pre>x = 10\n\nif x &gt; 0: # outer if statement\n    if x % 2 == 0: # inner if statement\n        print(\"x is positive and even\")\n    else:\n        print(\"x is positive and odd\")\n</pre> x = 10  if x &gt; 0: # outer if statement     if x % 2 == 0: # inner if statement         print(\"x is positive and even\")     else:         print(\"x is positive and odd\") <pre>x is positive and even\n</pre> In\u00a0[5]: Copied! <pre>x = 10\n\nresult = \"even\" if x % 2 == 0 else \"odd\"\nprint(result)\n</pre> x = 10  result = \"even\" if x % 2 == 0 else \"odd\" print(result) <pre>even\n</pre>"},{"location":"conditional_statements/#python-conditional-statements","title":"Python Conditional Statements\u00b6","text":""},{"location":"conditional_statements/#conditional-statements","title":"Conditional Statements\u00b6","text":"<p>Conditional statements, also known as decision-making statements, are used to execute a block of code based on a specific condition. They control the flow of the program, allowing it to make choices and execute different paths of execution.</p>"},{"location":"conditional_statements/#types-of-conditional-statements","title":"Types of Conditional Statements\u00b6","text":"<p>Python has the following types of conditional statements:</p> <ol> <li><code>if</code> statement</li> <li><code>if-else</code> statement</li> <li><code>if-elif-else</code> statement</li> <li>Nested <code>if</code> statement</li> <li>Ternary Expression</li> </ol>"},{"location":"conditional_statements/#if-statement","title":"if Statement\u00b6","text":"<p>The <code>if</code> statement is used to execute a block of code if a condition is <code>True</code>. If the condition is <code>False</code>, the block of code is skipped.</p> <p>Syntax of the <code>if</code> statement:</p> <pre><code>if condition:\n    # block of code\n</code></pre>"},{"location":"conditional_statements/#if-else-statement","title":"if-else Statement\u00b6","text":"<p>The <code>if-else</code> statement is used to execute one block of code if the condition is <code>True</code> and another block of code if the condition is <code>False</code>.</p> <p>Syntax of the <code>if-else</code> statement:</p> <pre><code>if condition:\n    # block of code\nelse:\n    # block of code\n</code></pre>"},{"location":"conditional_statements/#if-elif-else-statement","title":"if-elif-else Statement\u00b6","text":"<p>The <code>if-elif-else</code> statement is used to execute one block of code from multiple blocks of code based on multiple conditions. The <code>elif</code> keyword is used to add more conditions. It can have multiple <code>elif</code> blocks. The <code>else</code> block is optional. The <code>else</code> block is executed if none of the conditions are <code>True</code>.</p> <p>Syntax of the <code>if-elif-else</code> statement:</p> <pre><code>if condition1:\n    # block of code\nelif condition2:\n    # block of code\nelse:\n    # block of code\n</code></pre>"},{"location":"conditional_statements/#nested-if-statement","title":"Nested if Statement\u00b6","text":"<p>A nested <code>if</code> statement is an <code>if</code> statement inside another <code>if</code> statement. It is used to test multiple conditions. The inner <code>if</code> statement is executed only if the outer <code>if</code> statement is <code>True</code>. The inner <code>if</code> statement can also have its own <code>elif</code> and <code>else</code> blocks.</p>"},{"location":"conditional_statements/#ternary-expression","title":"Ternary Expression\u00b6","text":"<p>The ternary expression is a one-liner conditional expression. It is used to assign a value to a variable based on a condition. If only one condition is to be checked, the ternary expression is used.</p> <p>Syntax of the ternary expression:</p> <pre><code>variable = value1 if condition else value2\n</code></pre>"},{"location":"data_types/","title":"Python Data Types","text":"In\u00a0[1]: Copied! <pre>x = 10 # int\nprint(type(x))\n</pre> x = 10 # int print(type(x)) <pre>&lt;class 'int'&gt;\n</pre> In\u00a0[2]: Copied! <pre># Integer\nx = 10\nprint(type(x))\n\n# Float\ny = 3.14\nprint(type(y))\n\n# Complex\nz = 5 + 2j\nprint(type(z))\n</pre> # Integer x = 10 print(type(x))  # Float y = 3.14 print(type(y))  # Complex z = 5 + 2j print(type(z)) <pre>&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'complex'&gt;\n</pre> In\u00a0[3]: Copied! <pre>txt = \"Hello, World!\"\nprint(type(txt))\n</pre> txt = \"Hello, World!\" print(type(txt)) <pre>&lt;class 'str'&gt;\n</pre> In\u00a0[4]: Copied! <pre># List\nnames = [\"wasik\", \"ahmed\", \"apon\"]\nprint(type(names))\n\n# Tuple\nstudent = (\"wasik\", 23, True)\nprint(type(student))\n\n# Range\nnums = range(5)\nprint(type(nums))\n</pre> # List names = [\"wasik\", \"ahmed\", \"apon\"] print(type(names))  # Tuple student = (\"wasik\", 23, True) print(type(student))  # Range nums = range(5) print(type(nums)) <pre>&lt;class 'list'&gt;\n&lt;class 'tuple'&gt;\n&lt;class 'range'&gt;\n</pre> In\u00a0[5]: Copied! <pre># Dictionary\nperson = {\"name\": \"wasik\", \"age\": 23, \"is_regular\": True}\nprint(type(person))\n</pre> # Dictionary person = {\"name\": \"wasik\", \"age\": 23, \"is_regular\": True} print(type(person)) <pre>&lt;class 'dict'&gt;\n</pre> In\u00a0[6]: Copied! <pre># Set\ncolors = {\"red\", \"green\", \"blue\"}\nprint(type(colors))\n\n# Frozenset\nfrozen_colors = frozenset(colors)\nprint(type(frozen_colors))\n</pre> # Set colors = {\"red\", \"green\", \"blue\"} print(type(colors))  # Frozenset frozen_colors = frozenset(colors) print(type(frozen_colors)) <pre>&lt;class 'set'&gt;\n&lt;class 'frozenset'&gt;\n</pre> In\u00a0[7]: Copied! <pre>is_student = True\nprint(type(is_student))\n\nis_teacher = False\nprint(type(is_teacher))\n</pre> is_student = True print(type(is_student))  is_teacher = False print(type(is_teacher)) <pre>&lt;class 'bool'&gt;\n&lt;class 'bool'&gt;\n</pre> In\u00a0[8]: Copied! <pre># Bytes\ndata = b\"Hello\"\nprint(type(data))\n\n# Bytearray\nbyte_data = bytearray(data)\nprint(type(byte_data))\n\n# Memoryview\nmemory = memoryview(byte_data)\nprint(type(memory))\n</pre> # Bytes data = b\"Hello\" print(type(data))  # Bytearray byte_data = bytearray(data) print(type(byte_data))  # Memoryview memory = memoryview(byte_data) print(type(memory)) <pre>&lt;class 'bytes'&gt;\n&lt;class 'bytearray'&gt;\n&lt;class 'memoryview'&gt;\n</pre> In\u00a0[9]: Copied! <pre>x = None\nprint(type(x))\n</pre> x = None print(type(x)) <pre>&lt;class 'NoneType'&gt;\n</pre> In\u00a0[10]: Copied! <pre># Set a specific data type\nx = float(10)\nprint(x, type(x))\n\ny = int(3.14)\nprint(y, type(y))\n\nz = str(100)\nprint(z, type(z))\n\nnum = int(\"100\")\nprint(num, type(num))\n\ncomplex_num = complex(3, 4)\nprint(complex_num, type(complex_num))\n\nstudent_info = dict(name=\"wasik\", age=23, is_regular=True)\nprint(student_info, type(student_info))\n</pre> # Set a specific data type x = float(10) print(x, type(x))  y = int(3.14) print(y, type(y))  z = str(100) print(z, type(z))  num = int(\"100\") print(num, type(num))  complex_num = complex(3, 4) print(complex_num, type(complex_num))  student_info = dict(name=\"wasik\", age=23, is_regular=True) print(student_info, type(student_info)) <pre>10.0 &lt;class 'float'&gt;\n3 &lt;class 'int'&gt;\n100 &lt;class 'str'&gt;\n100 &lt;class 'int'&gt;\n(3+4j) &lt;class 'complex'&gt;\n{'name': 'wasik', 'age': 23, 'is_regular': True} &lt;class 'dict'&gt;\n</pre>"},{"location":"data_types/#python-data-types","title":"Python Data Types\u00b6","text":""},{"location":"data_types/#data-types","title":"Data Types\u00b6","text":"<p>Data types are used to represent the type of data stored in a variable. Data types are classes and variables are instances of these classes.</p> <p>Python has the following built-in data types:</p> <ol> <li>Numeric Types: <code>int</code>, <code>float</code>, <code>complex</code></li> <li>String Type: <code>str</code></li> <li>Sequence Types: <code>list</code>, <code>tuple</code>, <code>range</code></li> <li>Mapping Type: <code>dict</code></li> <li>Set Types: <code>set</code>, <code>frozenset</code></li> <li>Boolean Type: <code>bool</code></li> <li>Binary Types: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li> <li>None Type: <code>NoneType</code></li> </ol>"},{"location":"data_types/#checking-data-type","title":"Checking Data Type\u00b6","text":"<p>The built-in <code>type()</code> function is used to check the data type of a variable.</p>"},{"location":"data_types/#different-data-types","title":"Different Data Types\u00b6","text":""},{"location":"data_types/#numeric-types","title":"Numeric Types\u00b6","text":"<p>Numeric types are used to store numeric values. Python has three numeric types: <code>int</code>, <code>float</code>, and <code>complex</code>.</p> <ol> <li><code>int</code>: Integer type represents whole numbers. For example, <code>10</code>, <code>-5</code>, <code>1000</code>, etc.</li> <li><code>float</code>: Float type represents floating-point numbers. For example, <code>3.14</code>, <code>2.718</code>, etc.</li> <li><code>complex</code>: Complex type represents complex numbers. For example, <code>3 + 4j</code>, <code>5 - 2j</code>, etc.</li> </ol>"},{"location":"data_types/#string-type","title":"String Type\u00b6","text":"<p>The string type is used to store text data. Strings are immutable sequences of characters enclosed in single, double, or triple quotes.</p>"},{"location":"data_types/#sequence-types","title":"Sequence Types\u00b6","text":"<p>Sequence types are used to store multiple items in an ordered collection. Python has three built-in sequence types: <code>list</code>, <code>tuple</code>, and <code>range</code>.</p> <ol> <li><code>list</code>: List is a collection of items separated by commas and enclosed within square brackets. Lists are mutable.</li> <li><code>tuple</code>: Tuple is a collection of items separated by commas and enclosed within parentheses. Tuples are immutable.</li> <li><code>range</code>: Range is used to generate a sequence of numbers. It is immutable.</li> </ol> <p>Note: Strings are also considered as sequence types.</p>"},{"location":"data_types/#mapping-type","title":"Mapping Type\u00b6","text":"<p>Mapping types are used to store key-value pairs. Python has one built-in mapping type: <code>dict</code>.</p> <ol> <li><code>dict</code>: Dictionary is a collection of key-value pairs separated by commas and enclosed within curly braces. Dictionaries are mutable.</li> </ol>"},{"location":"data_types/#set-types","title":"Set Types\u00b6","text":"<p>Set types are used to store unique items. Python has two built-in set types: <code>set</code> and <code>frozenset</code>.</p> <ol> <li><code>set</code>: Set is a collection of unique items separated by commas and enclosed within curly braces. Sets are mutable.</li> <li><code>frozenset</code>: Frozenset is an immutable set.</li> </ol>"},{"location":"data_types/#boolean-type","title":"Boolean Type\u00b6","text":"<p>Boolean type is used to represent truth values. It has two values: <code>True</code> and <code>False</code>.</p>"},{"location":"data_types/#binary-types","title":"Binary Types\u00b6","text":"<p>Binary types are used to store binary data. Python has three built-in binary types: <code>bytes</code>, <code>bytearray</code>, and <code>memoryview</code>.</p> <ol> <li><code>bytes</code>: Bytes type is used to store a sequence of bytes. Bytes are immutable.</li> <li><code>bytearray</code>: Bytearray type is used to store a sequence of bytes. Bytearrays are mutable.</li> <li><code>memoryview</code>: Memoryview type is used to access the internal data of an object that supports the buffer protocol.</li> </ol>"},{"location":"data_types/#none-type","title":"None Type\u00b6","text":"<p>None type is used to represent the absence of a value. It is used to define a null value or to indicate that a variable has no value.</p>"},{"location":"data_types/#setting-specific-data-type","title":"Setting Specific Data Type\u00b6","text":"<p>Specify the data type of a variable using the built-in data type constructors. The constructors are used to create variables of a specific data type.</p> <p>Examples:</p>"},{"location":"functions/","title":"Python Functions","text":"In\u00a0[1]: Copied! <pre># Example: A simple function that prints \"Hello, World\"\n\ndef greet():\n    print(\"Hello, World!\")\n</pre> # Example: A simple function that prints \"Hello, World\"  def greet():     print(\"Hello, World!\") In\u00a0[2]: Copied! <pre># Calling the greet() function\n\ngreet()\n</pre> # Calling the greet() function  greet() <pre>Hello, World!\n</pre> In\u00a0[3]: Copied! <pre># Example: A function that takes two parameters and prints their sum\n\ndef add(a, b):\n    print(a + b)\n\n# Calling the add() function with arguments 5 and 3\nadd(5, 3)\n</pre> # Example: A function that takes two parameters and prints their sum  def add(a, b):     print(a + b)  # Calling the add() function with arguments 5 and 3 add(5, 3) <pre>8\n</pre> In\u00a0[4]: Copied! <pre># Example: A function that takes a string and an integer as parameters and prints the string multiple times\n\ndef print_string(s, n):\n    print(s * n)\n\n# Calling the print_string() function with arguments \"Hello\" and 3\nprint_string(\"Hello\", 3)\n</pre> # Example: A function that takes a string and an integer as parameters and prints the string multiple times  def print_string(s, n):     print(s * n)  # Calling the print_string() function with arguments \"Hello\" and 3 print_string(\"Hello\", 3) <pre>HelloHelloHello\n</pre> In\u00a0[5]: Copied! <pre># Example: A function that calculates the area of a rectangle with a default height\n\ndef calculate_area(width, height=10):\n    return width * height\n\n# Calling the calculate_area() function without the height argument\narea1 = calculate_area(5)  # Uses the default height of 10\nprint(\"Area with default height:\", area1)  # Output: Area with default height: 50\n\n# Calling the calculate_area() function with both width and height arguments\narea2 = calculate_area(5, 20)  # Uses the provided height of 20\nprint(\"Area with provided height:\", area2)  # Output: Area with provided height: 100\n</pre> # Example: A function that calculates the area of a rectangle with a default height  def calculate_area(width, height=10):     return width * height  # Calling the calculate_area() function without the height argument area1 = calculate_area(5)  # Uses the default height of 10 print(\"Area with default height:\", area1)  # Output: Area with default height: 50  # Calling the calculate_area() function with both width and height arguments area2 = calculate_area(5, 20)  # Uses the provided height of 20 print(\"Area with provided height:\", area2)  # Output: Area with provided height: 100 <pre>Area with default height: 50\nArea with provided height: 100\n</pre> In\u00a0[6]: Copied! <pre># Example: A function that returns if a number is even or odd\n\ndef even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Calling the even_or_odd() function with argument 7\nresult = even_or_odd(7) # stores the return value in the variable result\nprint(result)\n</pre> # Example: A function that returns if a number is even or odd  def even_or_odd(num):     if num % 2 == 0:         return \"Even\"     else:         return \"Odd\"  # Calling the even_or_odd() function with argument 7 result = even_or_odd(7) # stores the return value in the variable result print(result) <pre>Odd\n</pre> In\u00a0[7]: Copied! <pre># Example: A function that returns the sum and difference of two numbers\n\ndef sum_diff(a, b):\n    return a + b, a - b\n\n# Calling the sum_diff() function with arguments 10 and 5\nsum, diff = sum_diff(10, 5) # stores the return values in the variables sum and diff\nprint(\"Sum:\", sum)\nprint(\"Difference:\", diff)\n</pre> # Example: A function that returns the sum and difference of two numbers  def sum_diff(a, b):     return a + b, a - b  # Calling the sum_diff() function with arguments 10 and 5 sum, diff = sum_diff(10, 5) # stores the return values in the variables sum and diff print(\"Sum:\", sum) print(\"Difference:\", diff) <pre>Sum: 15\nDifference: 5\n</pre>"},{"location":"functions/#python-functions","title":"Python Functions\u00b6","text":""},{"location":"functions/#function","title":"Function\u00b6","text":"<p>A function is a reusable block of code that performs a specific task. Functions organize code into logical blocks and make it easy to reuse and maintain.</p>"},{"location":"functions/#creating-a-function","title":"Creating a Function\u00b6","text":"<p>In Python, a function is defined using the <code>def</code> keyword followed by the function name and parentheses <code>()</code>. The function body starts with a colon <code>:</code> and is indented.</p> <p>The general syntax of a function:</p> <pre><code>def function_name(parameters):\n    # block of code\n    return value\n</code></pre>"},{"location":"functions/#calling-a-function","title":"Calling a Function\u00b6","text":"<p>To call a function, simply write the function name followed by parentheses <code>()</code>.</p>"},{"location":"functions/#function-parameters","title":"Function Parameters\u00b6","text":"<p>Parameters are values that are passed to the function when it is called. The function can use these values to perform a specific task. Parameters are defined inside the parentheses <code>()</code> in the function definition. Multiple parameters are separated by commas.</p>"},{"location":"functions/#default-parameters","title":"Default Parameters\u00b6","text":"<p>A default parameter is a parameter that assumes a default value if a value is not provided in the function call. Default parameters are used when the function is called without passing the value for that parameter. Default parameters are defined in the function definition.</p>"},{"location":"functions/#return-statement","title":"Return Statement\u00b6","text":"<p>The <code>return</code> statement is used to return a value of any data type from a function. The function can use this value to provide the output of the function. If the <code>return</code> statement is not used, the function returns <code>None</code> by default. The function execution stops when the <code>return</code> statement is encountered. The <code>return</code> statement can return multiple values separated by commas.</p>"},{"location":"functions/#built-in-functions","title":"Built-in Functions\u00b6","text":"<p>Python provides many built-in functions that are readily available for use. These functions are part of the Python Standard Library and do not require any import statement to use them. Some commonly used built-in functions are <code>print()</code>, <code>len()</code>, <code>type()</code>, <code>int()</code>, <code>str()</code>, <code>float()</code>, <code>input()</code>, <code>range()</code>, <code>abs()</code>, <code>max()</code>, <code>min()</code>, <code>sum()</code>, <code>sorted()</code>, <code>reversed()</code>, <code>enumerate()</code>, <code>zip()</code>, <code>map()</code>, <code>filter()</code>, <code>all()</code>, <code>any()</code>, <code>eval()</code>, <code>format()</code>, <code>open()</code>, <code>read()</code>, <code>write()</code>, <code>close()</code> etc.</p>"},{"location":"hello_world/","title":"Hello World","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World\")\n</pre> print(\"Hello World\") <pre>Hello World\n</pre>"},{"location":"hello_world/#hello-world","title":"Hello World\u00b6","text":""},{"location":"introduction/","title":"Python Introduction","text":""},{"location":"strings/","title":"Python Strings","text":"In\u00a0[1]: Copied! <pre># Single Quotes\nsingle_quote_str = 'Hello, World!'\nprint(single_quote_str)\n\n# Double Quotes\ndouble_quote_str = \"Hello, World!\"\nprint(double_quote_str)\n\n# Triple Quotes\ntriple_quote_str = '''Hello, World!'''\nprint(triple_quote_str)\n\n# Triple Quotes for Multi-line Strings\nmulti_line_str = '''This is a multi-line string.\nIt spans multiple lines.\nEach line is separated by a newline character.'''\nprint(multi_line_str)\n</pre> # Single Quotes single_quote_str = 'Hello, World!' print(single_quote_str)  # Double Quotes double_quote_str = \"Hello, World!\" print(double_quote_str)  # Triple Quotes triple_quote_str = '''Hello, World!''' print(triple_quote_str)  # Triple Quotes for Multi-line Strings multi_line_str = '''This is a multi-line string. It spans multiple lines. Each line is separated by a newline character.''' print(multi_line_str) <pre>Hello, World!\nHello, World!\nHello, World!\nThis is a multi-line string.\nIt spans multiple lines.\nEach line is separated by a newline character.\n</pre> In\u00a0[2]: Copied! <pre>first_name = \"Wasik\"\nlast_name = \"Ahmed\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n</pre> first_name = \"Wasik\" last_name = \"Ahmed\" full_name = first_name + \" \" + last_name print(full_name) <pre>Wasik Ahmed\n</pre> In\u00a0[3]: Copied! <pre>name = \"Wasik \"\nrepeated_name = name * 3\nprint(repeated_name)\n</pre> name = \"Wasik \" repeated_name = name * 3 print(repeated_name) <pre>Wasik Wasik Wasik \n</pre> In\u00a0[4]: Copied! <pre># Positive Indexing\nname = \"Wasik\"\nprint(name[0]) # first character\nprint(name[1]) # second character\n\n# Negative Indexing\nprint(name[-1]) # last character\nprint(name[-2]) # second last character\n</pre> # Positive Indexing name = \"Wasik\" print(name[0]) # first character print(name[1]) # second character  # Negative Indexing print(name[-1]) # last character print(name[-2]) # second last character <pre>W\na\nk\ni\n</pre> In\u00a0[5]: Copied! <pre>name = \"Wasik Ahmed\"\nprint(name[0:5]) # from index 0 to 4\nprint(name[6:]) # from index 6 to end\nprint(name[:5]) # from start to index 4\nprint(name[::2]) # from start to end with a step of 2\n</pre> name = \"Wasik Ahmed\" print(name[0:5]) # from index 0 to 4 print(name[6:]) # from index 6 to end print(name[:5]) # from start to index 4 print(name[::2]) # from start to end with a step of 2 <pre>Wasik\nAhmed\nWasik\nWskAmd\n</pre> In\u00a0[6]: Copied! <pre>txt = \"Hello, World!\"\nprint(len(txt))\n</pre> txt = \"Hello, World!\" print(len(txt)) <pre>13\n</pre> In\u00a0[7]: Copied! <pre>txt = \"Hello, World!\"\nprint(\"Hello\" in txt)\nprint(\"Python\" not in txt)\n</pre> txt = \"Hello, World!\" print(\"Hello\" in txt) print(\"Python\" not in txt) <pre>True\nTrue\n</pre> In\u00a0[8]: Copied! <pre>txt = \"hello, World!\"\nprint(txt.lower()) # convert to lowercase\nprint(txt.upper()) # convert to uppercase\nprint(txt.title()) # convert to title case\nprint(txt.capitalize()) # capitalize the first character\nprint(txt.swapcase()) # swap the case of each character\n</pre> txt = \"hello, World!\" print(txt.lower()) # convert to lowercase print(txt.upper()) # convert to uppercase print(txt.title()) # convert to title case print(txt.capitalize()) # capitalize the first character print(txt.swapcase()) # swap the case of each character <pre>hello, world!\nHELLO, WORLD!\nHello, World!\nHello, world!\nHELLO, wORLD!\n</pre> In\u00a0[9]: Copied! <pre>name = \"Wasik\"\nage = 23\n\n# Using format() method\ntxt = \"My name is {} and I am {} years old.\"\nprint(txt.format(name, age))\n\n# Using f-string\ntxt = f\"My name is {name} and I am {age} years old.\"\nprint(txt)\n</pre> name = \"Wasik\" age = 23  # Using format() method txt = \"My name is {} and I am {} years old.\" print(txt.format(name, age))  # Using f-string txt = f\"My name is {name} and I am {age} years old.\" print(txt) <pre>My name is Wasik and I am 23 years old.\nMy name is Wasik and I am 23 years old.\n</pre> In\u00a0[10]: Copied! <pre>txt = \"Hello\\nWorld!\" # newline\nprint(txt)\n\ntxt = \"Hello\\tWorld!\" # tab\nprint(txt)\n\ntxt = \"Hello\\\\World!\" # backslash\nprint(txt)\n\ntxt = \"Hello\\'World!\" # single quote\nprint(txt)\n\ntxt = \"Hello\\\"World!\" # double quote\nprint(txt)\n\ntxt = \"Hello\\bWorld!\" # backspace\nprint(txt)\n</pre> txt = \"Hello\\nWorld!\" # newline print(txt)  txt = \"Hello\\tWorld!\" # tab print(txt)  txt = \"Hello\\\\World!\" # backslash print(txt)  txt = \"Hello\\'World!\" # single quote print(txt)  txt = \"Hello\\\"World!\" # double quote print(txt)  txt = \"Hello\\bWorld!\" # backspace print(txt) <pre>Hello\nWorld!\nHello\tWorld!\nHello\\World!\nHello'World!\nHello\"World!\nHellWorld!\n</pre> In\u00a0[11]: Copied! <pre>txt = r\"Hello\\nWorld!\"\nprint(txt)\n</pre> txt = r\"Hello\\nWorld!\" print(txt) <pre>Hello\\nWorld!\n</pre>"},{"location":"strings/#python-strings","title":"Python Strings\u00b6","text":""},{"location":"strings/#strings","title":"Strings\u00b6","text":"<p>In Python, Strings are sequences of characters enclosed in single, double, or triple quotes. Strings are used to store text data. Strings are immutable, which means that once a string is created, it cannot be changed.</p>"},{"location":"strings/#creating-strings","title":"Creating Strings\u00b6","text":""},{"location":"strings/#string-operations","title":"String Operations\u00b6","text":""},{"location":"strings/#concatenation","title":"Concatenation\u00b6","text":"<p>Strings can be concatenated using the <code>+</code> operator.</p>"},{"location":"strings/#repetition","title":"Repetition\u00b6","text":"<p>Strings can be repeated using the <code>*</code> operator.</p>"},{"location":"strings/#indexing","title":"Indexing\u00b6","text":"<p>Strings can be indexed using the <code>[]</code> operator. Index can be positive or negative. Positive index starts from <code>0</code> and negative index starts from <code>-1</code>.</p>"},{"location":"strings/#slicing","title":"Slicing\u00b6","text":"<p>Strings can be sliced using the <code>:</code> operator. Slicing returns a substring from the original string.</p> <p>Syntax: <code>string[start:stop:step]</code></p>"},{"location":"strings/#length","title":"Length\u00b6","text":"<p>The <code>len()</code> function is used to get the length of a string.</p>"},{"location":"strings/#membership","title":"Membership\u00b6","text":"<p>The <code>in</code> and <code>not in</code> operators are used to check if a substring is present in a string.</p>"},{"location":"strings/#case-conversion","title":"Case Conversion\u00b6","text":"<p>The <code>lower()</code>, <code>upper()</code>, <code>title()</code>, <code>capitalize()</code>, and <code>swapcase()</code> methods are used to convert the case of a string.</p>"},{"location":"strings/#string-formatting","title":"String Formatting\u00b6","text":"<p>The <code>format()</code> method is used to format strings. It replaces placeholders <code>{}</code> with the values passed as arguments.</p> <p>Syntax: <code>string.format(value1, value2, ...)</code></p> <p>The <code>f-string</code> is also used to format strings. It is a more concise and readable way to format strings.</p> <p>Syntax: <code>f\"string {value1} {value2} ...\"</code></p>"},{"location":"strings/#escape-characters","title":"Escape Characters\u00b6","text":"<p>Escape characters are used to insert characters that are illegal in a string. They are preceded by a backslash <code>\\</code>. Some common escape characters are: <code>\\n</code>, <code>\\t</code>, <code>\\\\</code>, <code>\\'</code>, <code>\\\"</code>.</p>"},{"location":"strings/#raw-strings","title":"Raw Strings\u00b6","text":"<p>Raw strings are used to ignore escape characters. They are prefixed with <code>r</code> or <code>R</code>. Raw strings are useful when working with regular expressions.</p>"},{"location":"strings/#string-methods","title":"String Methods\u00b6","text":"<p>Python has many built-in methods that can be used to manipulate strings. Some common string methods are:</p> <ol> <li><code>capitalize()</code>: Converts the first character of a string to uppercase.</li> <li><code>casefold()</code>: Converts a string to lowercase.</li> <li><code>center(width)</code>: Returns a centered string.</li> <li><code>count(substring)</code>: Returns the number of occurrences of a substring in a string.</li> <li><code>endswith(suffix)</code>: Returns <code>True</code> if a string ends with a specified suffix.</li> <li><code>find(substring)</code>: Searches the string for a specified value and returns the position of where it was found.</li> <li><code>format()</code>: Formats the string.</li> <li><code>isalnum()</code>: Returns <code>True</code> if all characters in a string are alphanumeric.</li> <li><code>isalpha()</code>: Returns <code>True</code> if all characters in a string are in the alphabet.</li> <li><code>isdigit()</code>: Returns <code>True</code> if all characters in a string are digits.</li> <li><code>islower()</code>: Returns <code>True</code> if all characters in a string are lowercase.</li> <li><code>isspace()</code>: Returns <code>True</code> if all characters in a string are whitespaces.</li> <li><code>istitle()</code>: Returns <code>True</code> if the string follows the rules of a title.</li> <li><code>isupper()</code>: Returns <code>True</code> if all characters in a string are uppercase.</li> <li><code>join(iterable)</code>: Joins the elements of an iterable to the end of the string.</li> <li><code>lower()</code>: Converts a string to lowercase.</li> <li><code>replace(old, new)</code>: Replaces a specified value with another value in a string.</li> <li><code>split(separator)</code>: Splits the string at the specified separator and returns a list.</li> <li><code>startswith(prefix)</code>: Returns <code>True</code> if the string starts with a specified prefix.</li> <li><code>strip()</code>: Returns a trimmed version of the string.</li> <li><code>upper()</code>: Converts a string to uppercase.</li> </ol>"},{"location":"type_casting/","title":"Python Type Casting","text":"In\u00a0[1]: Copied! <pre>x = 10 # integer\n\n# Implicit type casting\ny = x + 5.5 # adding an integer and a float\nprint(y)\nprint(type(y))\n</pre> x = 10 # integer  # Implicit type casting y = x + 5.5 # adding an integer and a float print(y) print(type(y)) <pre>15.5\n&lt;class 'float'&gt;\n</pre> In\u00a0[2]: Copied! <pre>x = 10.5 # float\ny = int(x) # converting to integer\nprint(y)\nprint(type(y))\n</pre> x = 10.5 # float y = int(x) # converting to integer print(y) print(type(y)) <pre>10\n&lt;class 'int'&gt;\n</pre> In\u00a0[3]: Copied! <pre>x = 10 # integer\ny = float(x) # converting to float\nprint(y)\nprint(type(y))\n</pre> x = 10 # integer y = float(x) # converting to float print(y) print(type(y)) <pre>10.0\n&lt;class 'float'&gt;\n</pre> In\u00a0[4]: Copied! <pre>x = 10 # integer\ny = str(x) # converting to string\nprint(y)\nprint(type(y))\n</pre> x = 10 # integer y = str(x) # converting to string print(y) print(type(y)) <pre>10\n&lt;class 'str'&gt;\n</pre> In\u00a0[5]: Copied! <pre>x = 10 # integer\ny = bool(x) # converting to boolean\nprint(y)\nprint(type(y))\n</pre> x = 10 # integer y = bool(x) # converting to boolean print(y) print(type(y)) <pre>True\n&lt;class 'bool'&gt;\n</pre> In\u00a0[6]: Copied! <pre>x = 10 # integer\ny = complex(x) # converting to complex\nprint(y)\nprint(type(y))\n</pre> x = 10 # integer y = complex(x) # converting to complex print(y) print(type(y)) <pre>(10+0j)\n&lt;class 'complex'&gt;\n</pre> In\u00a0[7]: Copied! <pre>x = (10, 20, 30) # tuple\ny = list(x) # converting to list\nprint(y)\nprint(type(y))\n</pre> x = (10, 20, 30) # tuple y = list(x) # converting to list print(y) print(type(y)) <pre>[10, 20, 30]\n&lt;class 'list'&gt;\n</pre> In\u00a0[8]: Copied! <pre>x = [10, 20, 30] # list\ny = tuple(x) # converting to tuple\nprint(y)\nprint(type(y))\n</pre> x = [10, 20, 30] # list y = tuple(x) # converting to tuple print(y) print(type(y)) <pre>(10, 20, 30)\n&lt;class 'tuple'&gt;\n</pre> In\u00a0[9]: Copied! <pre>x = [10, 20, 30, 10, 20, 30] # list\ny = set(x) # converting to set\nprint(y)\nprint(type(y))\n</pre> x = [10, 20, 30, 10, 20, 30] # list y = set(x) # converting to set print(y) print(type(y)) <pre>{10, 20, 30}\n&lt;class 'set'&gt;\n</pre> In\u00a0[10]: Copied! <pre>x = [(\"name\", \"wasik\"), (\"age\", 23)] # list of tuples\ny = dict(x) # converting to dictionary\nprint(y)\nprint(type(y))\n</pre> x = [(\"name\", \"wasik\"), (\"age\", 23)] # list of tuples y = dict(x) # converting to dictionary print(y) print(type(y)) <pre>{'name': 'wasik', 'age': 23}\n&lt;class 'dict'&gt;\n</pre> In\u00a0[11]: Copied! <pre>x = [10, 20, 30, 10, 20, 30] # list\ny = frozenset(x) # converting to frozenset\nprint(y)\nprint(type(y))\n</pre> x = [10, 20, 30, 10, 20, 30] # list y = frozenset(x) # converting to frozenset print(y) print(type(y)) <pre>frozenset({10, 20, 30})\n&lt;class 'frozenset'&gt;\n</pre> In\u00a0[12]: Copied! <pre>x = \"Python is fun!\" # string\ny = bytes(x, \"utf-8\") # converting to bytes\nprint(y)\nprint(type(y))\n</pre> x = \"Python is fun!\" # string y = bytes(x, \"utf-8\") # converting to bytes print(y) print(type(y)) <pre>b'Python is fun!'\n&lt;class 'bytes'&gt;\n</pre> In\u00a0[13]: Copied! <pre>x = \"Python is fun!\" # string\ny = bytearray(x, \"utf-8\") # converting to bytearray\nprint(y)\nprint(type(y))\n</pre> x = \"Python is fun!\" # string y = bytearray(x, \"utf-8\") # converting to bytearray print(y) print(type(y)) <pre>bytearray(b'Python is fun!')\n&lt;class 'bytearray'&gt;\n</pre> In\u00a0[14]: Copied! <pre>x = \"Python is fun!\" # string\ny = memoryview(x.encode()) # converting to memoryview\nprint(y)\nprint(type(y))\n</pre> x = \"Python is fun!\" # string y = memoryview(x.encode()) # converting to memoryview print(y) print(type(y)) <pre>&lt;memory at 0x105acde40&gt;\n&lt;class 'memoryview'&gt;\n</pre> In\u00a0[15]: Copied! <pre>x = 5 # integer\ny = range(x) # converting to range\nprint(y)\nprint(type(y))\n</pre> x = 5 # integer y = range(x) # converting to range print(y) print(type(y)) <pre>range(0, 5)\n&lt;class 'range'&gt;\n</pre>"},{"location":"type_casting/#python-type-casting","title":"Python Type Casting\u00b6","text":""},{"location":"type_casting/#type-casting","title":"Type Casting\u00b6","text":"<p>Type casting is the process of converting one data type to another.</p>"},{"location":"type_casting/#implicit-type-casting","title":"Implicit Type Casting\u00b6","text":"<p>Implicit type casting is done automatically by the interpreter. In this type of type casting, the interpreter automatically converts one data type to another without any user intervention.</p>"},{"location":"type_casting/#explicit-type-casting","title":"Explicit Type Casting\u00b6","text":"<p>Explicit type casting is done manually by the user. In this type of type casting, the user manually converts one data type to another using the built-in data type constructors.</p> <p>List of built-in data type constructors:</p> <ol> <li><code>int()</code>: Converts to an integer type.</li> <li><code>float()</code>: Converts to a float type.</li> <li><code>str()</code>: Converts to a string type.</li> <li><code>bool()</code>: Converts to a boolean type.</li> <li><code>complex()</code>: Converts to a complex type.</li> <li><code>list()</code>: Converts to a list type.</li> <li><code>tuple()</code>: Converts to a tuple type.</li> <li><code>set()</code>: Converts to a set type.</li> <li><code>dict()</code>: Converts to a dictionary type.</li> <li><code>frozenset()</code>: Converts to a frozenset type.</li> <li><code>bytes()</code>: Converts to a bytes type.</li> <li><code>bytearray()</code>: Converts to a bytearray type.</li> <li><code>memoryview()</code>: Converts to a memoryview type.</li> <li><code>range()</code>: Converts to a range type.</li> <li><code>NoneType()</code>: Converts to a None type.</li> </ol>"},{"location":"type_casting/#converting-to-integer","title":"Converting to Integer\u00b6","text":""},{"location":"type_casting/#converting-to-float","title":"Converting to Float\u00b6","text":""},{"location":"type_casting/#converting-to-string","title":"Converting to String\u00b6","text":""},{"location":"type_casting/#converting-to-boolean","title":"Converting to Boolean\u00b6","text":"<p>In Python, the following values are considered <code>False</code>:</p> <ol> <li><code>False</code></li> <li><code>None</code></li> <li><code>0</code> (integer)</li> <li><code>0.0</code> (float)</li> <li><code>0j</code> (complex)</li> <li><code>\"\"</code> (empty string)</li> <li><code>[]</code> (empty list)</li> <li><code>()</code> (empty tuple)</li> <li><code>{}</code> (empty dictionary)</li> <li><code>set()</code> (empty set)</li> <li><code>frozenset()</code> (empty frozenset)</li> <li><code>range(0)</code> (empty range)</li> <li><code>NoneType</code> (None)</li> </ol> <p>All other values are considered <code>True</code>.</p>"},{"location":"type_casting/#converting-to-complex","title":"Converting to Complex\u00b6","text":""},{"location":"type_casting/#converting-to-list","title":"Converting to List\u00b6","text":""},{"location":"type_casting/#converting-to-tuple","title":"Converting to Tuple\u00b6","text":""},{"location":"type_casting/#converting-to-set","title":"Converting to Set\u00b6","text":""},{"location":"type_casting/#converting-to-dictionary","title":"Converting to Dictionary\u00b6","text":""},{"location":"type_casting/#converting-to-frozenset","title":"Converting to frozenset\u00b6","text":""},{"location":"type_casting/#converting-to-bytes","title":"Converting to Bytes\u00b6","text":""},{"location":"type_casting/#converting-to-bytearray","title":"Converting to Bytearray\u00b6","text":""},{"location":"type_casting/#converting-to-memoryview","title":"Converting to Memoryview\u00b6","text":""},{"location":"type_casting/#converting-to-range","title":"Converting to Range\u00b6","text":""},{"location":"variables/","title":"Python Variables","text":"In\u00a0[1]: Copied! <pre>age = 23 # integer variable\nname = \"wasik\" # string variable\nis_regular = True # boolean variable\nprint(age)\nprint(name)\nprint(is_regular)\n</pre> age = 23 # integer variable name = \"wasik\" # string variable is_regular = True # boolean variable print(age) print(name) print(is_regular) <pre>23\nwasik\nTrue\n</pre> In\u00a0[2]: Copied! <pre>x, y, z = 5, 10, 15\nprint(x, y, z)\n</pre> x, y, z = 5, 10, 15 print(x, y, z) <pre>5 10 15\n</pre> In\u00a0[3]: Copied! <pre>x = y = z = 10\nprint(x, y, z)\n</pre> x = y = z = 10 print(x, y, z) <pre>10 10 10\n</pre> In\u00a0[4]: Copied! <pre>student_info = [\"wasik\", 23, True] # list\nname, age, is_regular = student_info # unpacking the list\nprint(name, age, is_regular)\n</pre> student_info = [\"wasik\", 23, True] # list name, age, is_regular = student_info # unpacking the list print(name, age, is_regular) <pre>wasik 23 True\n</pre> In\u00a0[5]: Copied! <pre>x = 10\nprint(type(x))\n\nx = \"Python is fun!\"\nprint(type(x))\n</pre> x = 10 print(type(x))  x = \"Python is fun!\" print(type(x)) <pre>&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n</pre> In\u00a0[6]: Copied! <pre>name = \"wasik\" # global variable\n\ndef welcome():\n    name = \"apon\" # local variable\n    print(\"Welcome\", name)\n\nwelcome()\nprint(\"Hello\", name)\n</pre> name = \"wasik\" # global variable  def welcome():     name = \"apon\" # local variable     print(\"Welcome\", name)  welcome() print(\"Hello\", name) <pre>Welcome apon\nHello wasik\n</pre> In\u00a0[7]: Copied! <pre>name = \"wasik\" # global variable\n\ndef welcome():\n    global name\n    name = \"apon\" # changing the value of global variable\n    print(\"Welcome\", name)\n\nwelcome()\nprint(\"Hello\", name)\n</pre> name = \"wasik\" # global variable  def welcome():     global name     name = \"apon\" # changing the value of global variable     print(\"Welcome\", name)  welcome() print(\"Hello\", name) <pre>Welcome apon\nHello apon\n</pre>"},{"location":"variables/#python-variables","title":"Python Variables\u00b6","text":""},{"location":"variables/#variables","title":"Variables\u00b6","text":"<p>Variables are containers for storing data values. These are the names given to the memory locations where the actual data is stored. Once a variable is created, it can be used to store, retrieve, and manipulate data. The data stored in a variable can be of any type, such as a number, string, list, etc.</p>"},{"location":"variables/#creating-variables","title":"Creating Variables\u00b6","text":"<p>In Python, variables are created when a value is assigned to it. The assignment operator <code>=</code> is used to assign values to variables.</p>"},{"location":"variables/#assigning-multiple-values-to-multiple-variables","title":"Assigning Multiple Values to Multiple Variables\u00b6","text":""},{"location":"variables/#assigning-single-value-to-multiple-variables","title":"Assigning Single Value to Multiple Variables\u00b6","text":""},{"location":"variables/#unpacking-a-collection","title":"Unpacking a Collection\u00b6","text":""},{"location":"variables/#type-of-variables","title":"Type of Variables\u00b6","text":"<p>Python is a dynamically typed language, which means that the type of a variable is determined at runtime. So variables can change type.</p>"},{"location":"variables/#checking-variable-type","title":"Checking Variable Type\u00b6","text":"<p>The <code>type()</code> function is used to check the type of a variable.</p>"},{"location":"variables/#global-variables","title":"Global Variables\u00b6","text":"<p>Variables that are created outside of a function scope are known as global variables. These variables can be accessed from any part of the program.</p>"},{"location":"variables/#change-value-of-global-variable-inside-a-function","title":"Change Value of Global Variable Inside a Function\u00b6","text":"<p>To change the value of a global variable inside a function, the <code>global</code> keyword is used.</p>"},{"location":"variables/#rules-of-naming-variables-in-python","title":"Rules of Naming Variables in Python\u00b6","text":"<ul> <li>A variable name must start with a letter or the underscore character.</li> <li>A variable name cannot start with a number or any other special characters except the underscore.</li> <li>Variable names are case-sensitive.</li> <li>Variable names can contain letters, numbers, and underscores.</li> <li>Python keywords cannot be used as variable names.</li> </ul>"},{"location":"variables/#best-practices-for-naming-variables","title":"Best Practices for Naming Variables\u00b6","text":"<ul> <li>Use descriptive names that convey the variable's purpose.</li> <li>Follow the snake_case naming convention for variables.</li> <li>Avoid using single letters like x or y, except in loops or simple cases.</li> <li>Use constants for values that do not change, following the <code>UPPER_CASE</code> naming style.</li> </ul>"}]}